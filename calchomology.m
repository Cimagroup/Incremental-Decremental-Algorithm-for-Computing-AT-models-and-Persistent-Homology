function [ xpoints,xdimension,xboundary,xH,xg,barcode ] = calchomology( filename,resolution,cameras_begin,cameras_end,min_coord,max_coord )
%CALCHOMOLGY Calculate homology
%   Calculate homology for image constructed with <cameras> cameras of
%   resolution <resolution>. This function call getcomplex for generate
%   matrixes of cells' points, dimensions of this cells and boundaries of
%   this cells. And then it call function that generate at-model.

    % Variables C, points and dimension are initialized
    % C is a matrix dimensional. C stores indexes of points that represent
    C = zeros( single( 2* ( ( max_coord' - min_coord' ) / resolution + 1 ) + 1 ) );
    % points is a matrix bidimensional with tree rows and size of C
    % columns. Rows stored coordinates x, y and z of cells that represents
    % each voxels of the complex cubic
    points = zeros ( 3, size(C,1)*size(C,2)*size(C,3) );
    % dimension is a matrix bidimensional with one row and size of C
    % columns. Position i of dimension store the dimension of i point.
    dimension = zeros ( 1, size(C,1)*size(C,2)*size(C,3) );
    f=[];
    g=[];
    phi=[];
    H=[];
    cellH=[];
    barcode0=[];
    barcode1=[];
    barcode2=[];

    for cameras=cameras_end:-1:cameras_begin
        size_points = size( points,2 );
        % Variables filename, resolution and cameras are used for generate complex
        % used in construction of at-model
        [ points,dimension,boundary,C ] = getcomplex( filename,resolution,cameras,min_coord,C,points,dimension );
        xpoints{cameras}=points;
        xdimension{cameras}=dimension;
        xboundary{cameras}=boundary;
        % Variables g and H are generated by at-model
        [ f,g,phi,H,cellH ] = atmodel( points,boundary,size_points+1,f,g,phi,H,cellH );
        xg{cameras}=g;
        xH{cameras}=H;
        viewhomology(points,dimension,boundary,H,g);drawnow;

        dim0=dimension(:,H==1);
        dim0=ones(size(dim0(:,dim0==0),2),1);
        if size(dim0',1)>0
            if size(dim0,1)>size(barcode0,1)
                barcode0(size(dim0,1),1)=0;
            elseif size(dim0,1)<size(barcode0,1)
                dim0(size(barcode0,1),1)=0;
            end
            barcode0(:,cameras)=dim0;
        end

        dim1=dimension(:,H==1);
        dim1=ones(size(dim1(:,dim1==1),2),1);
        if size(dim1,1)>0
            if size(dim1,1)>size(barcode1,1)
                barcode1(size(dim1,1),1)=0;
            elseif size(dim1,1)<size(barcode1,1)
                dim1(size(barcode1,1),1)=0;
            end
            barcode1(:,cameras)=dim1;
        end

        dim2=dimension(:,H==1);
        dim2=ones(size(dim2(:,dim2==2),2),1);
        if size(dim2,1)>0
            if size(dim2,1)>size(barcode2,1)
                barcode2(size(dim2,1),1)=0;
            elseif size(dim2,1)<size(barcode2,1)
                dim2(size(barcode2,1),1)=0;
            end
            barcode2(:,cameras)=dim2;
        end

    end;

    barcode{1}=barcode0;
    barcode{2}=barcode1;
    barcode{3}=barcode2;

    
end
